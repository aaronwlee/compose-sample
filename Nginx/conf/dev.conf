# Express Server에 대한 정의를 해줍니다.
# Docker Compose를 사용하면 자동으로 Docker Compose에서 사용한
# 이름에 따라 도커 네트워크에서 DNS가 생성됩니다.
# 저희 Express Server는 express_server라는 이름으로
# Docker Compose 파일에 정의해놨기 때문에 해당 이름을
# DNS로 사용하시면 요청이 Docker Compose 내부 내트워크를 타고
# Express Server로 전달이 됩니다.
# 포트가 4000번이 아니고 3000번인 이유는
# 호스트를 통해서 네트워크 연결이 될 경우 4000번이 맞지만
# 다이렉트하게 Express Server의 컨테이너에 꼿히기때문에
# 내부 포트인 3000번을 사용해주셔야 합니다.
upstream express_server {
    server express_server:3000;
}

server {
    listen 80;

    # 로그파일을 저장하는 부분입니다. 이 부분을
    # Docker Compose에서 Volume 쉐어를 해놓으면
    # 호스트 기기에서도 도커에서 생성된 로그파일을 볼수있습니다.
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # /api의 경로로 Nginx를 hit 하게되면
    # express Server로 reverse proxy 역할을 하라는 코드입니다.
    # 다만 서버 개발의 편의를 위해 /api 부분을 제외하고
    # /api 이후에 오는 부분들만 전달하게됩니다.
    # rewrite 룰을 정의하지 않을경우
    # Express Server에서 모든 api포인트에 /api를 최상위
    # 라우트로 지정해줘야해서 귀찮아집니다.
    location /api {
        proxy_pass http://express_server;
        rewrite /api/(.*) /$1 break;
    }
}